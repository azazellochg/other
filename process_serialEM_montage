#!/bin/bash
export IMAGIC_BATCH=1
###process_serialEM_montage.sh  Copyright (C) 2014  Grigory Sharov
###This program comes with ABSOLUTELY NO WARRANTY.
###This is free software, and you are welcome to redistribute it
###under GNU GENERAL PUBLIC LICENSE Version 3.

echo -e "Batch to process SerialEM mrc stacks: create a mrc raw data folder and a stack of power spectrums\n------------------------------------"
#source your EMAN2 bashrc file here!
source ~/eman21.rc # EMAN2.1-beta
######################################
#Adjust threshold parameters if you want
UpperThres=7
LowerThres=0
######################################
mkdir power 2>/dev/null
mkdir raw 2>/dev/null
docfile=`ls -l *.mdoc | head -1 | awk '{print $NF}'`
if cat $docfile | grep "SerialEM: Digitized by Gatan Camera on TF20" &> /dev/null
then
mag=`cat $docfile  | grep "Magnification" | uniq | sed -e 's/[^0-9]*//g'`
case "$mag" in
"19000" )
PixSize=5.5
;;
"25000" )
PixSize=4.27
;;
"29000" )
PixSize=3.65
;;
"40000" )
PixSize=2.6
;;
"50000" )
PixSize=2.12
;;
"62000" )
PixSize=1.71
esac
echo -en "Pixel spacing (uncoarsened!) [detected ${mag}x : ${PixSize}A/px]: "
read PS
: PS=${PS:=$PixSize}
echo -en "Coarsening factor [4]: "
read CO
[ $((CO%2)) -eq 0 ] || ( echo "This value should be even!" && exit 1 )
: CO=${CO:=4}
COPS=`echo "scale=3;$PS*$CO" | bc`
echo -n "Mask power spectrums (this is useful for IMAGIC display)? [n] "
read ans
: ans=${ans:="n"}
case $ans in
Y|y)
        ans="y"
        echo -n "Put a mask on power spectrum up to first zero (A): [20] "
        read RES
        : RES=${RES:=20}
        rad=`echo "scale=2;${COPS}*2/${RES}" | bc`
        ;;
N|n)
        ans="n"
        ;;
*)
        echo "Wrong answer!" && exit 1
        ;;
esac
else
echo "It is not a SerialEM mdoc file!" && exit 1
fi
[ -f output.log ] && rm -f output.log
echo -e "`date`
Pixel size (uncoarsened) was: $PS
Coarsening factor was: $CO
Micrographs converted:
####################################\n" > output.log
### Converting mrc SerialEM stacks to mrc files ###
tot=`ls *.mrc | wc -l | awk '{print $1}'`
number=1
for i in `ls *.mrc | sed -e "s/.mrc//g"`
do
        if [ ! -e "${i}.mrc.mdoc" ]
                then
                echo -e "WARNING: No corresponding mdoc file found for ${i}.mrc!\n" | tee -a output.log
        fi
        echo -en "Writing mrc images...($number out of $tot)\r"
        echo "Unstacking ${i}.mrc ..." >> output.log
        e2proc2d.py ${i}.mrc raw/${i}.mrc --unstacking --threed2twod >> output.log 2>&1
        ((number++))
done
echo -e "####################################\nWriting mrc images..DONE!" | tee -a output.log
### Renaming files ###
count=1
for i in `ls raw/*.mrc`
do
        mv ${i} raw/img${count}.mrc
        ((count++))
        echo -en "Renaming mrc images...\r"
done
echo -e "Renaming mrc images..DONE!\n####################################" | tee -a output.log
### Start processing of mrc files in raw directory ###
num=`ls raw/img*.mrc | wc -l | awk '{print $1}'`
count2=1
for a in `ls raw/img*.mrc | sed -e 's/raw\///g;s/.mrc//g'`
do
echo "Normalizing, coarsing and calculating power spectrum for raw/${a}.mrc" >> output.log
if [ "$CO" != "1" ]
then
echo -ne "Normalizing, coarsing and calculating power spectrum: ${count2} of ${num}\r"
e2proc2d.py raw/${a}.mrc power/pow-stack.img --process=normalize.edgemean --process=threshold.clampminmax.nsigma:nsigma=4 --process=math.realtofft --medianshrink ${CO} >> output.log 2>&1
((count2++))
else
echo -ne "Normalizing and calculating power spectrum: ${count2} of ${num}\r"
e2proc2d.py raw/${a}.mrc power/pow-stack.img --process=normalize.edgemean --process=threshold.clampminmax.nsigma:nsigma=4 --process=math.realtofft >> output.log 2>&1
((count2++))
fi
done
if [ -n "${IMAGIC_ROOT}" ];then
ls raw/img*.mrc | sed -e 's/raw\/img//g;s/.mrc//g' > mics.plt
export IMAGIC_BATCH=1
echo ""
echo -e "####################################\nIMAGIC found! Setting micrograph number in header files..." | tee -a output.log
${IMAGIC_ROOT}/stand/headers.e <<EOF >> output.log 2>&1
WRITE
MICROGRAPH_ID
PLT_FILE
mics.plt
power/pow-stack
EOF
fi 

if [ ${ans} == "y" ];then
echo -e "####################################\nMasking power spectrums..." | tee -a output.log
e2proc2d.py power/pow-stack.img power/pow-stack-t.img --process=threshold.clampminmax:maxval=${UpperThres}:minval=${LowerThres} --process=normalize.edgemean >> output.log 2>&1
size=`e2iminfo.py power/pow-stack.img | grep "in IMAGIC format" | awk '{print $7}'`
rad2=`echo "scale=2;${rad}*${size}" | bc | cut -d'.' -f1`
e2proc2d.py power/pow-stack-t.img power/pow-stack-t-masked.img --process=mask.soft:inner_radius=${rad2} --process=normalize.edgemean >> output.log 2>&1

if [ -n "${IMAGIC_ROOT}" ];then
ls raw/img*.mrc | sed -e 's/raw\/img//g;s/.mrc//g' > mics.plt
export IMAGIC_BATCH=1
echo -e "####################################\nIMAGIC found! Setting micrograph number in header files..." | tee -a output.log
${IMAGIC_ROOT}/stand/headers.e <<EOF >> output.log 2>&1
WRITE
MICROGRAPH_ID
PLT_FILE
mics.plt
power/pow-stack-t
EOF
fi 

fi

echo -e "DONE!"
if [ ${ans} == "y" ];then
echo "There are three stacks of power spectrums (pixel size is ${COPS}): pow-stack, pow-stack-t (thresholded) and pow-stack-t-masked (thresholded and masked up to ${RES}A)" | tee -a output.log
else
echo "There are two stacks of power spectrums (pixel size is ${COPS}): pow-stack and pow-stack-t (thresholded)" | tee -a output.log
fi
