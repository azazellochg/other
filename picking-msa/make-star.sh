#!/bin/bash
# This script should be launched after "msa-cl.sh"
# User should have selected bad classums from "classums/all_sums" into "classums/all_sums.plt" file
# This script will generate an updated star file with good particles, based on the star file,
# generated by prepare-files.sh script.

###### USER INPUT ########################################
input_particles="particles"                             # input IMAGIC .plt file created by prepare-files.sh script
input_star="particles"                                  # input .star file with all particles
imagic_dir="/usr/local/imagic/2014_08_22"               # IMAGIC root folder
debug="0"                                               # if 0 - remove intermediate files
#########################################################

# load IMAGIC and check input
module load imagic/imagic
export IMAGIC_BATCH=1
[ ! -f ${input_particles}.plt ] && echo "No input plt file found!" && exit 1
[ ! -d processing ] && echo "ERROR! Folder processing not found" && exit 1
numRef=`awk '{print $3}' ${input_particles}.plt |sort -n | uniq | tail -n1`
echo "Removing particles corresponding to bad class averages..."

# create tmp file with class numbers and check total number of classums
[ -f .cls ] && rm -f .cls
cls=`ls processing/ | egrep 'particles\-ref[0-9]{1,3}\-(cl[0-9]{1,3}.img)' | sed 's/.img//g' | sort -V`
for cl in ${cls}
do
        cls_num=`echo ${cl} | cut -d'-' -f3 | sed 's/[^0-9]*//g'`
        for ((k = 1; k <= ${cls_num}; k++))
        do
                echo "${cl} $k" >> .cls
        done
done

# calculate number of images from IMAGIC header
count() {
export IMAGIC_BATCH=1
${imagic_dir}/stand/headers.e <<EOF
READ
HOWMANY
classums/all_sums
EOF
}
sums=`count | grep "Number of 2D images in file:" | cut -d":" -f2 | sed 's/[^0-9]*//'`
[ `wc -l .cls | cut -d' ' -f1` -ne ${sums} ] && echo "ERROR: wrong classum number!" && exit 1

# check if user selected bad classums into plt file
[ ! -f classums/all_sums.plt ] && echo "ERROR: File not found: classums/all_sums.plt. Did you select bad class averages?" && exit 1

# find bad classums for each file and update .cls file
awk 'FNR==NR{array[$1]=1;next}(FNR in array){print $1,$2}' classums/all_sums.plt .cls | sort -V > .cls.tmp
mv .cls.tmp .cls

# find particles ID (#52) corresponding to bad classums (#108 is class number)
for i in `awk '{print $1}' .cls | sort -V | uniq`
do
        file="`echo ${i} | cut -d'-' -f1,2`-norm"
        file_ali="`echo ${i} | cut -d'-' -f1,2`-norm-alirot"
        # check if ali-rot was done
        [ -f processing/${file_ali}.img ] && filename="${file_ali}" || filename="${file}"
        # extract particle ID and classum number
        ${imagic_dir}/stand/headers.e <<EOF > /dev/null
PLT_OUT
INDEX/LABEL
NUMBER_OF_INDEX
52;108
NO
processing/${filename}
processing/${filename}.plt
EOF
        # correct formatting in plt files
        awk '{printf "%d %d\n",$1,$2}' processing/${filename}.plt > processing/${filename}.plt.tmp
        mv processing/${filename}.plt.tmp processing/${filename}.plt
        # if we had only 1 class - no MSA was done
        clsNum=`echo "${i}" | cut -d'-' -f3 | sed 's/[^0-9]*//g'`
        [ ${clsNum} -eq 1 ] && ( echo "0" > .cls.tmp ) || ( grep "${i}" .cls | cut -d' ' -f2 > .cls.tmp )
        # grep bad particle IDs
        awk 'NR==FNR{a[$0];next}($2 in a){print $1}' .cls.tmp processing/${filename}.plt > processing/${filename}-bad.plt
done
cat processing/particles-ref*bad.plt | sort -n | uniq > particles_bad.plt
echo "`wc -l particles_bad.plt | awk '{print $1}'` bad particles found. Total number: `wc -l ${input_particles}.plt | awk '{print $1}'`"

# update input star file
[ `grep -c mrcs ${input_star}.star` -ne `wc -l ${input_particles}.plt | awk '{print $1}'` ] && echo "ERROR! Number of particles in star file and plt files does not match" && exit 1
awk 'NF<3{print}' ${input_star}.star > particles_good.star
awk 'NF>3{print}' ${input_star}.star > ${input_star}.star.tmp
awk 'FNR==NR{array[$1]=1;next}!(FNR in array){print}' particles_bad.plt ${input_star}.star.tmp >> particles_good.star
rm -f ${input_star}.star.tmp
echo "DONE! New star file: particles_good.star with `grep -c mrcs particles_good.star` particles"

# clean up
[ $debug -eq 0 ] && rm -rf .cls* particles_bad.plt
