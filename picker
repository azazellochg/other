#!/bin/bash

#coarse and filter mics for gempicker to 30A, do the same with references
#for i in `ls aligned_sums/*.mrc | sed 's/aligned_sums//g'`;do e2proc2d.py aligned_sums${i} aligned_sums_c4_f30${i} --meanshrink 4 --process=filter.lowpass.gauss:apix=5.64:cutoff_abs=0.376 --process=normalize.edgemean ;done

#------------------------INPUT PARAMETERS---------------------------
prog="/usr/local/gempicker/bin/gEMpicker"
orig="$PWD/img"
tpl="$PWD/tpl"
msk="$PWD/msk"
res="$PWD/output"
box="80"     #desired box size
photo="1024" # size of micrograph (should be square!)
angle="10" # angular step of template search
contrast="1" # 1-protein is white, 0-protein is black
maxpeaks="50" # max number of particles per micrograph
dist="60" # minimal distance between picked particles

#-------------------------------------------------------------------
[ ! -d $res ] && mkdir $res
( [ ! -d $orig ] || [ ! -d $tpl ] || [ ! -d $msk ] ) && ( echo "Some directories was not found!" && exit 1 )

D1=`date +%s`
echo -e "Started on `date`"
for m in `seq 0 1`
do
${prog} --nGPU=1 --nCPU=12 --mode=$m --thresh=0.1 --dirSch=${tpl} --dirTgt=${orig} --dirMskSch=${msk} --dirRes=${res} --angle2D=${angle} --contrast=${contrast} --boxSize=${box} --nPickMax=${maxpeaks} --boxDist=${dist}
done
D2=`date +%s` ; D=$((D2-D1)) ; printf "Job duration = %dhr %dmin %dsec \n" $(($D/3600)) $(($D/60%60)) $(($D%60))

#----------------COMMENTS-------------------------------------------
<<comments

Max size of original data is 4096x4096px

Particles extracted from one micrograph are put in the same folder $Res/pik_ext/$name_of_micrograph

The coordinates of extracted particles are exported in the folder $Res/pik_coord. Each text file contains coordinates in each micrograph of similar name

Overlay correlation value: the correlation value for each selected particle is overlaid on the particle image in blue. The range of correlation values is also overlaid on the correlation map exported in TIFF format. 

File formats: CCP4 and TIFF are fully supported. gEMpicker can read TIFF data in all single-channel formats ((signed) 8/16/32 integer, single and double precision). If you need multiple-channel TIFF, please let me know. The TIFF files exported from gEMpicker are in unsigned 8bit integer for visualization purpose only. At the moment, gEMpicker only partially supports MRC format since this format has some variants from different labs. Fully MRC support is planned for the near future.

To convert dm3 to ccp4 maps use (do not forget to normalize and threshold data after, before start picking): 
e2proc2d.py --process=xform.flip:axis=y input.dm3 output.map --outtype=mrc

To box particles with EMAN1 batch boxer use:
batchboxer dbbox=input.box input=input.map output=output.img

To convert gEMpicker picked particles use the same program:
e2proc2d.py --outtype=imagic 00xx__mask__xx__yyy.map output.img


   --dirTgt=<string>
     (required)  Directory of target images (*.mrc)

   --dirSch=<string>
     (required)  Directory of search images (*.mrc)

   --dirMskRef=<string>
     Directory of masks for target images (*.tif)

   --dirMskSch=<string>
     (required)  Directory of masks for search images (*.tif)

   --dirRes=<string>
     (required)  Directory for results

   --mode=<unsigned int>
     (required)  Running mode: 0-compute correlation, 1-perform picking
     (box only), 2-perform picking

   --angle2D=<float>
     (required)  In-plane rotating angle in degree, (0 = no rotation)

   --contrast=<bool>
     (required)  Micrograph contrast: 0-negative peaks (cryo), 1-positive peaks (neg.stain)

   --thresh=<float>
     (required)  Threshold value for picking: [0-1]

   --nPickMax=<unsigned int>
     Max number of particles picked from each micrograph (0 = no limit)

   --boxSize=<unsigned int>
     Size of picked images (if not provided or = 0, use search image size)

   --boxDist=<unsigned int>
     Minimal distance between peaks (if not provided or = 0, use search
     image half-size)

   --nCPU=<unsigned int>
     Number of CPU cores / process

   --nGPU=<unsigned int>
     Number of GPUs / process

   --mpiDistTgt=<bool>
     Distribution of target images to processes: 0-no, 1-yes

   --,  --ignore_rest
     Ignores the rest of the labeled arguments following this flag.

   --version
     Displays version information and exits.

   -h,  --help
     Displays usage information and exits.


   gEMpicker is a template-based, highly parallel GPU-accelerated particle
   picking program developed at INRIA Nancy. It runs in multi-thread and
   multi-process mode to use all avaliable CPU cores and GPUs in a single
   workstation or a multi-node cluster for the correlation computation. 

   Supported formats: MRC for target and search images, TIFF for masks 

   Copyright: Thai V. Hoang, INRIA 

   Email: vanthai.hoang@inria.fr 

   Reference: 

   T. V. Hoang, X. Cavin, P. Schultz, and D. W. Ritchie, "gEMpicker: A
   highly parallel GPU-accelerated tool for electron micrograph particle
   picking," BMC Structural Biology, 2013.


comments
